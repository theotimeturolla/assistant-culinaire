import google.generativeai as genai
import json
import os
from typing import List, Dict, Optional
import time
from dotenv import load_dotenv

load_dotenv()

# Configuration de l'API (id√©alement, la cl√© devrait √™tre dans un fichier .env)
API_KEY = os.getenv('GOOGLE_GENERATIVE_AI_KEY') # √Ä remplacer par votre cl√© dans un environnement s√©curis√©

if not API_KEY:
    raise ValueError("La cl√© d'API n'a pas √©t√© trouv√©e. Veuillez v√©rifier votre configuration.")

genai.configure(api_key=API_KEY)

class AssistantCulinaire:
    def __init__(self):
        self.model = genai.GenerativeModel('gemini-2.0-flash')
        self.preferences = {
            "regime": "standard",
            "allergies": [],
            "preferences": [],
            "aversions": [],
            "nb_personnes": 1
        }
        self.historique_recettes = []
    
    def saluer_utilisateur(self) -> str:
        """Affiche un message d'accueil personnalis√©"""
        print("\n" + "="*60)
        print("üçΩÔ∏è  ASSISTANT CULINAIRE PERSONNEL  üçΩÔ∏è")
        print("="*60)
        print("Bonjour ! Je suis votre assistant culinaire personnel.")
        print("Je peux vous aider √† trouver des recettes avec les ingr√©dients")
        print("que vous avez ou cr√©er des menus adapt√©s √† vos pr√©f√©rences.")
        print("="*60 + "\n")
    
    def configurer_preferences(self) -> None:
        """Permet √† l'utilisateur de configurer ses pr√©f√©rences culinaires"""
        print("\nüìã Configuration de vos pr√©f√©rences culinaires")
        
        # Nombre de personnes
        try:
            nb = int(input("Pour combien de personnes cuisinez-vous habituellement? "))
            self.preferences["nb_personnes"] = max(1, nb)
        except ValueError:
            print("Nombre invalide, je vais consid√©rer 1 personne par d√©faut.")
            self.preferences["nb_personnes"] = 1
            
        # R√©gime alimentaire
        print("\nQuel type de r√©gime suivez-vous?")
        regimes = ["standard", "v√©g√©tarien", "v√©g√©talien", "sans gluten", "pal√©o", "c√©tog√®ne", "autre"]
        for i, regime in enumerate(regimes, 1):
            print(f"{i}. {regime}")
        
        try:
            choix = int(input("Votre choix (num√©ro): "))
            if 1 <= choix <= len(regimes):
                if choix == len(regimes):  # "autre"
                    self.preferences["regime"] = input("Pr√©cisez votre r√©gime: ")
                else:
                    self.preferences["regime"] = regimes[choix-1]
            else:
                print("Choix invalide, r√©gime standard par d√©faut.")
        except ValueError:
            print("Entr√©e invalide, r√©gime standard par d√©faut.")
            
        # Allergies
        allergies = input("\nAvez-vous des allergies alimentaires? (s√©par√©es par des virgules): ")
        if allergies.strip():
            self.preferences["allergies"] = [a.strip() for a in allergies.split(",")]
            
        # Pr√©f√©rences alimentaires
        preferences = input("\nQuels sont vos ingr√©dients ou plats pr√©f√©r√©s? (s√©par√©s par des virgules): ")
        if preferences.strip():
            self.preferences["preferences"] = [p.strip() for p in preferences.split(",")]
            
        # Aversions alimentaires
        aversions = input("\nQuels ingr√©dients n'aimez-vous pas? (s√©par√©s par des virgules): ")
        if aversions.strip():
            self.preferences["aversions"] = [a.strip() for a in aversions.split(",")]

        # Budget
        budget = input("\nQuel est votre budget moyen par personne pour un repas? (en euros): ")
        if budget.strip():
            self.preferences["budget"] = float(budget)
        
        # Temps de pr√©paration
        temps = input("\nQuel est le temps de pr√©paration maximum que vous souhaitez pour une recette? (en minutes): ") 
        if temps.strip():
            self.preferences["temps_preparation"] = int(temps)
            
        print("\n‚úÖ Vos pr√©f√©rences ont √©t√© enregistr√©es!")
        self._afficher_resume_preferences()
    
    def _afficher_resume_preferences(self) -> None:
        """Affiche un r√©sum√© des pr√©f√©rences actuelles"""
        print("\nüìå Vos pr√©f√©rences actuelles:")
        print(f"‚Ä¢ Nombre de personnes: {self.preferences['nb_personnes']}")
        print(f"‚Ä¢ R√©gime alimentaire: {self.preferences['regime']}")
        
        if self.preferences["allergies"]:
            print(f"‚Ä¢ Allergies: {', '.join(self.preferences['allergies'])}")
        else:
            print("‚Ä¢ Allergies: Aucune")
            
        if self.preferences["preferences"]:
            print(f"‚Ä¢ Pr√©f√©rences: {', '.join(self.preferences['preferences'])}")
        else:
            print("‚Ä¢ Pr√©f√©rences: Aucune sp√©cifi√©e")
            
        if self.preferences["aversions"]:
            print(f"‚Ä¢ Aversions: {', '.join(self.preferences['aversions'])}")
        else:
            print("‚Ä¢ Aversions: Aucune sp√©cifi√©e")

        if self.preferences.get("budget"):
            print(f"‚Ä¢ Budget moyen par personne: {self.preferences['budget']} ‚Ç¨")
        else:
            print("‚Ä¢ Budget moyen par personne: Non sp√©cifi√©")
        
        if self.preferences.get("temps_preparation"):
            print(f"‚Ä¢ Temps de pr√©paration maximum: {self.preferences['temps_preparation']} minutes")
        else:
            print("‚Ä¢ Temps de pr√©paration maximum: Non sp√©cifi√©")
    
    def generer_recette(self, ingredients: List[str]) -> str:
        """G√©n√®re une recette bas√©e sur les ingr√©dients disponibles et les pr√©f√©rences"""
        print("\nüîç Recherche de la meilleure recette possible...")
        
        # Construction du prompt avec les pr√©f√©rences
        prompt = f"""
        G√©n√®re une recette d√©taill√©e avec les ingr√©dients suivants: {', '.join(ingredients)}.
        
        Informations importantes:
        - Pour {self.preferences['nb_personnes']} personne(s)
        - R√©gime alimentaire: {self.preferences['regime']}
        """
        
        if self.preferences["allergies"]:
            prompt += f"- Allergies √† √©viter: {', '.join(self.preferences['allergies'])}\n"
            
        if self.preferences["aversions"]:
            prompt += f"- Ingr√©dients √† √©viter: {', '.join(self.preferences['aversions'])}\n"
            
        if self.preferences["preferences"]:
            prompt += f"- Pr√©f√©rences culinaires: {', '.join(self.preferences['preferences'])}\n"
        
        if self.preferences.get("budget"):
            prompt += f"- Budget moyen par personne: {self.preferences['budget']} ‚Ç¨\n"
        
        if self.preferences.get("temps_preparation"):
            prompt += f"- Temps de pr√©paration maximum: {self.preferences['temps_preparation']} minutes\n"  

            
        prompt += """
        Format de la recette:
        1. Nom de la recette (cr√©atif et attractif)
        2. Temps de pr√©paration et de cuisson
        3. Liste des ingr√©dients avec quantit√©s pr√©cises
        4. Instructions d√©taill√©es √©tape par √©tape
        5. Conseils de pr√©sentation
        6. Valeurs nutritionnelles approximatives
        """
        
        try:
            # Animation de chargement
            for _ in range(3):
                print(".", end="", flush=True)
                time.sleep(0.5)
            print("\n")
            
            response = self.model.generate_content(prompt)
            recette = response.text
            
            # Enregistrement dans l'historique
            self.historique_recettes.append({
                "ingredients": ingredients,
                "recette": recette[:100] + "..." if len(recette) > 100 else recette
            })
            
            return recette
        except Exception as e:
            return f"Erreur lors de la g√©n√©ration de la recette: {str(e)}"
    
    def generer_menu(self, jours: int) -> str:
        """G√©n√®re un menu pour plusieurs jours en fonction des pr√©f√©rences"""
        print(f"\nüìÜ G√©n√©ration d'un menu pour {jours} jours...")
        
        # Construction du prompt avec les pr√©f√©rences
        prompt = f"""
        G√©n√®re un menu d√©taill√© pour {jours} jours pour {self.preferences['nb_personnes']} personne(s).
        
        Informations importantes:
        - R√©gime alimentaire: {self.preferences['regime']}
        """
        
        if self.preferences.get("budget"):
            prompt += f"- Budget moyen par personne: {self.preferences['budget']} ‚Ç¨\n"
        
        if self.preferences.get("temps_preparation"):
            prompt += f"- Temps de pr√©paration maximum: {self.preferences['temps_preparation']} minutes\n"
        
        if self.preferences["allergies"]:
            prompt += f"- Allergies √† √©viter: {', '.join(self.preferences['allergies'])}\n"
            
        if self.preferences["aversions"]:
            prompt += f"- Ingr√©dients √† √©viter: {', '.join(self.preferences['aversions'])}\n"
            
        if self.preferences["preferences"]:
            prompt += f"- Pr√©f√©rences culinaires: {', '.join(self.preferences['preferences'])}\n"
            
        prompt += """
        Format du menu:
        1. Pour chaque jour: petit-d√©jeuner, d√©jeuner, d√Æner (et collations √©ventuelles)
        2. Liste de courses compl√®te √† la fin, organis√©e par cat√©gories d'aliments
        3. Estimations des co√ªts approximatifs du menu
        4. Conseils pour la pr√©paration √† l'avance et l'organisation
        """
        
        try:
            # Animation de chargement
            for _ in range(5):
                print(".", end="", flush=True)
                time.sleep(0.5)
            print("\n")
            
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            return f"Erreur lors de la g√©n√©ration du menu: {str(e)}"
    
    def sauvegarder_preferences(self, fichier: str = "preferences_culinaires.json") -> None:
        """Sauvegarde les pr√©f√©rences dans un fichier JSON"""
        try:
            with open(fichier, 'w', encoding='utf-8') as f:
                json.dump(self.preferences, f, ensure_ascii=False, indent=4)
            print(f"\n‚úÖ Pr√©f√©rences sauvegard√©es dans {fichier}")
        except Exception as e:
            print(f"\n‚ùå Erreur lors de la sauvegarde des pr√©f√©rences: {str(e)}")
    
    def charger_preferences(self, fichier: str = "preferences_culinaires.json") -> bool:
        """Charge les pr√©f√©rences depuis un fichier JSON"""
        try:
            if os.path.exists(fichier):
                with open(fichier, 'r', encoding='utf-8') as f:
                    self.preferences = json.load(f)
                print(f"\n‚úÖ Pr√©f√©rences charg√©es depuis {fichier}")
                self._afficher_resume_preferences()
                return True
            else:
                print("\nAucun fichier de pr√©f√©rences trouv√©.")
                return False
        except Exception as e:
            print(f"\n‚ùå Erreur lors du chargement des pr√©f√©rences: {str(e)}")
            return False

def afficher_menu_principal():
    """Affiche le menu principal de l'application"""
    print("\n" + "-"*60)
    print("üç≥  MENU PRINCIPAL  üç≥")
    print("-"*60)
    print("1. Cr√©er mon profil culinaire")
    print("2. Trouver une recette avec mes ingr√©dients")
    print("3. G√©n√©rer un menu pour plusieurs jours")
    print("4. Afficher mes pr√©f√©rences actuelles")
    print("5. M'identifier (charger un profil)")
    print("0. Quitter")
    print("-"*60)
    return input("Votre choix? ")

def main():
    assistant = AssistantCulinaire()
    assistant.saluer_utilisateur()
    
    # Essai de chargement des pr√©f√©rences existantes
    assistant.charger_preferences()
    
    while True:
        choix = afficher_menu_principal()
        
        if choix == "1":
            # Configurer les pr√©f√©rences et sauvegarder automatiquement
            assistant.configurer_preferences()
            
            # Demander un nom de profil pour la sauvegarde
            while True:
                nom_profil = input("\nüìù Voulez-vous sauvegarder ce profil ? Entrez votre pr√©nom (ou 'non' pour ignorer) : ")
                
                if nom_profil.lower() == 'non':
                    break
                
                if nom_profil:
                    # Ajouter l'extension .json si non pr√©sente
                    nom_fichier = nom_profil if nom_profil.endswith('.json') else f"{nom_profil}.json"
                    
                    try:
                        assistant.sauvegarder_preferences(nom_fichier)
                        print(f"‚úÖ Profil sauvegard√© sous {nom_fichier}")
                        break
                    except Exception as e:
                        print(f"‚ùå Erreur lors de la sauvegarde : {e}")
                else:
                    print("‚ö†Ô∏è Veuillez entrer un nom de profil valide.")
        
        elif choix == "2":
            print("\nü•ï Quels ingr√©dients avez-vous √† disposition?")
            print("(s√©par√©s par des virgules, ex: poulet, riz, carottes)")
            ingredients_input = input("> ")
            if ingredients_input.strip():
                ingredients = [i.strip() for i in ingredients_input.split(",")]
                recette = assistant.generer_recette(ingredients)
                print("\n" + "="*60)
                print("üçΩÔ∏è  VOTRE RECETTE PERSONNALIS√âE  üçΩÔ∏è")
                print("="*60)
                print(recette)
                print("="*60)
                
                # Option de sauvegarde
                if input("\nSouhaitez-vous sauvegarder cette recette dans un fichier? (o/n): ").lower() == 'o':
                    nom_fichier = input("Nom du fichier (sans extension): ") or "ma_recette"
                    try:
                        with open(f"{nom_fichier}.txt", 'w', encoding='utf-8') as f:
                            f.write(recette)
                        print(f"‚úÖ Recette sauvegard√©e dans {nom_fichier}.txt")
                    except Exception as e:
                        print(f"‚ùå Erreur de sauvegarde: {str(e)}")
            else:
                print("‚ö†Ô∏è Veuillez sp√©cifier au moins un ingr√©dient.")
        
        elif choix == "3":
            try:
                jours = int(input("\nPour combien de jours souhaitez-vous un menu? (1-14): "))
                if 1 <= jours <= 14:
                    menu = assistant.generer_menu(jours)
                    print("\n" + "="*60)
                    print(f"üìÜ  VOTRE MENU POUR {jours} JOURS  üìÜ")
                    print("="*60)
                    print(menu)
                    print("="*60)
                    
                    # Option de sauvegarde
                    if input("\nSouhaitez-vous sauvegarder ce menu dans un fichier? (o/n): ").lower() == 'o':
                        nom_fichier = input("Nom du fichier (sans extension): ") or "mon_menu"
                        try:
                            with open(f"{nom_fichier}.txt", 'w', encoding='utf-8') as f:
                                f.write(menu)
                            print(f"‚úÖ Menu sauvegard√© dans {nom_fichier}.txt")
                        except Exception as e:
                            print(f"‚ùå Erreur de sauvegarde: {str(e)}")
                else:
                    print("‚ö†Ô∏è Veuillez entrer un nombre de jours entre 1 et 14.")
            except ValueError:
                print("‚ö†Ô∏è Veuillez entrer un nombre valide.")
        
        elif choix == "4":
            assistant._afficher_resume_preferences()
        
        elif choix == "5":
    # Option pour s'identifier et charger un profil existant
            nom_profil = input("\nüìÇ Entrez le nom du profil √† charger (sans l'extension .json) : ")
    
            if not nom_profil:
                print("‚ö†Ô∏è Veuillez entrer un nom de profil valide.")
            else:
        # Construire le nom de fichier
                nom_fichier = nom_profil if nom_profil.endswith('.json') else f"{nom_profil}.json"
        
        # Tenter de charger le profil
                try:
                    if assistant.charger_preferences(nom_fichier):
                        print(f"‚úÖ Cool {nom_profil} ! Votre profil est charg√© avec succ√®s!")
                    else:
                        print(f"‚ùå {nom_profil}, votre profil n'existe pas.")
                        if input("Souhaitez-vous cr√©er un nouveau profil? (o/n): ").lower() == 'o':
                            assistant.configurer_preferences()
                    # Proposer de sauvegarder sous ce nom
                            if input(f"\nSouhaitez-vous sauvegarder ce profil sous le nom '{nom_profil}'? (o/n): ").lower() == 'o':
                                assistant.sauvegarder_preferences(nom_fichier)
                                print(f"‚úÖ Profil sauvegard√© sous {nom_fichier}")
                except Exception as e:
                    print(f"‚ùå Erreur lors du chargement du profil: {str(e)}")
                    print("Retour au menu principal...")
        
        elif choix == "0":
            print("\nüëã Merci d'avoir utilis√© l'Assistant Culinaire! √Ä bient√¥t!")
            break
        
        else:
            print("‚ö†Ô∏è Option invalide, veuillez r√©essayer.")

if __name__ == "__main__":
    main()
